//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// NewSessionResponse defines model for NewSessionResponse.
type NewSessionResponse struct {
	AuthorizationEndpoint string   `json:"authorization_endpoint"`
	ClientId              string   `json:"client_id"`
	Nonce                 string   `json:"nonce"`
	RedirectUri           string   `json:"redirect_uri"`
	ResponseType          string   `json:"response_type"`
	Scope                 []string `json:"scope"`
	SessionId             string   `json:"session_id"`
	State                 string   `json:"state"`
}

// SessionInfo defines model for SessionInfo.
type SessionInfo struct {
	Email string `json:"email"`
}

// SubmitSessionResponse defines model for SubmitSessionResponse.
type SubmitSessionResponse struct {
	Token string `json:"token"`
}

// GetSessionInfoParams defines parameters for GetSessionInfo.
type GetSessionInfoParams struct {
	SessionId     string `form:"session_id" json:"session_id"`
	Authorization string `json:"Authorization"`
}

// PostSessionNewParams defines parameters for PostSessionNew.
type PostSessionNewParams struct {
	IdempotencyKey string `json:"Idempotency-Key"`
}

// PostSessionSubmitJSONBody defines parameters for PostSessionSubmit.
type PostSessionSubmitJSONBody struct {
	Code      string `json:"code"`
	SessionId string `json:"session_id"`
}

// PostSessionSubmitJSONRequestBody defines body for PostSessionSubmit for application/json ContentType.
type PostSessionSubmitJSONRequestBody PostSessionSubmitJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get session info
	// (GET /session/info)
	GetSessionInfo(w http.ResponseWriter, r *http.Request, params GetSessionInfoParams)
	// Initiate new session
	// (POST /session/new)
	PostSessionNew(w http.ResponseWriter, r *http.Request, params PostSessionNewParams)
	// Submit authorization code
	// (POST /session/submit)
	PostSessionSubmit(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetSessionInfo operation middleware
func (siw *ServerInterfaceWrapper) GetSessionInfo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSessionInfoParams

	// ------------- Required query parameter "session_id" -------------

	if paramValue := r.URL.Query().Get("session_id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "session_id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "session_id", r.URL.Query(), &params.SessionId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "session_id", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSessionInfo(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostSessionNew operation middleware
func (siw *ServerInterfaceWrapper) PostSessionNew(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostSessionNewParams

	headers := r.Header

	// ------------- Required header parameter "Idempotency-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Idempotency-Key")]; found {
		var IdempotencyKey string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Idempotency-Key", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Idempotency-Key", valueList[0], &IdempotencyKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Idempotency-Key", Err: err})
			return
		}

		params.IdempotencyKey = IdempotencyKey

	} else {
		err := fmt.Errorf("Header parameter Idempotency-Key is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Idempotency-Key", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSessionNew(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostSessionSubmit operation middleware
func (siw *ServerInterfaceWrapper) PostSessionSubmit(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSessionSubmit(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/session/info", wrapper.GetSessionInfo)
	m.HandleFunc("POST "+options.BaseURL+"/session/new", wrapper.PostSessionNew)
	m.HandleFunc("POST "+options.BaseURL+"/session/submit", wrapper.PostSessionSubmit)

	return m
}

type GetSessionInfoRequestObject struct {
	Params GetSessionInfoParams
}

type GetSessionInfoResponseObject interface {
	VisitGetSessionInfoResponse(w http.ResponseWriter) error
}

type GetSessionInfo200JSONResponse SessionInfo

func (response GetSessionInfo200JSONResponse) VisitGetSessionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSessionInfo400Response struct {
}

func (response GetSessionInfo400Response) VisitGetSessionInfoResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetSessionInfo401Response struct {
}

func (response GetSessionInfo401Response) VisitGetSessionInfoResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostSessionNewRequestObject struct {
	Params PostSessionNewParams
}

type PostSessionNewResponseObject interface {
	VisitPostSessionNewResponse(w http.ResponseWriter) error
}

type PostSessionNew200JSONResponse NewSessionResponse

func (response PostSessionNew200JSONResponse) VisitPostSessionNewResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSessionSubmitRequestObject struct {
	Body *PostSessionSubmitJSONRequestBody
}

type PostSessionSubmitResponseObject interface {
	VisitPostSessionSubmitResponse(w http.ResponseWriter) error
}

type PostSessionSubmit200JSONResponse SubmitSessionResponse

func (response PostSessionSubmit200JSONResponse) VisitPostSessionSubmitResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSessionSubmit400Response struct {
}

func (response PostSessionSubmit400Response) VisitPostSessionSubmitResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostSessionSubmit401Response struct {
}

func (response PostSessionSubmit401Response) VisitPostSessionSubmitResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostSessionSubmit404Response struct {
}

func (response PostSessionSubmit404Response) VisitPostSessionSubmitResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get session info
	// (GET /session/info)
	GetSessionInfo(ctx context.Context, request GetSessionInfoRequestObject) (GetSessionInfoResponseObject, error)
	// Initiate new session
	// (POST /session/new)
	PostSessionNew(ctx context.Context, request PostSessionNewRequestObject) (PostSessionNewResponseObject, error)
	// Submit authorization code
	// (POST /session/submit)
	PostSessionSubmit(ctx context.Context, request PostSessionSubmitRequestObject) (PostSessionSubmitResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetSessionInfo operation middleware
func (sh *strictHandler) GetSessionInfo(w http.ResponseWriter, r *http.Request, params GetSessionInfoParams) {
	var request GetSessionInfoRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSessionInfo(ctx, request.(GetSessionInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSessionInfo")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSessionInfoResponseObject); ok {
		if err := validResponse.VisitGetSessionInfoResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSessionNew operation middleware
func (sh *strictHandler) PostSessionNew(w http.ResponseWriter, r *http.Request, params PostSessionNewParams) {
	var request PostSessionNewRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostSessionNew(ctx, request.(PostSessionNewRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSessionNew")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostSessionNewResponseObject); ok {
		if err := validResponse.VisitPostSessionNewResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSessionSubmit operation middleware
func (sh *strictHandler) PostSessionSubmit(w http.ResponseWriter, r *http.Request) {
	var request PostSessionSubmitRequestObject

	var body PostSessionSubmitJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostSessionSubmit(ctx, request.(PostSessionSubmitRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSessionSubmit")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostSessionSubmitResponseObject); ok {
		if err := validResponse.VisitPostSessionSubmitResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
